"""
2. 計算平均值
寫一個函數 average(nums)，輸入一個整數 list，回傳平均值（小數點取到一位）。
"""


def average(nums):
    if not nums:  
        return None
    return round(sum(nums) / len(nums) , 1)  

user_input = input("輸入數字，以空格分隔：")

nums = list(map(int,user_input.split()))

print("平均值:", average(nums))



"""
＊＊＊
解釋：
if not nums: 檢查傳入的列表是否為空。如果是空的，則返回 None。
sum(nums) 計算列表中所有數字的總和。
len(nums) 計算列表中的元素數量。
sum(nums) / len(nums) 計算平均值。
程式會要求使用者輸入數字，並以空格來分隔每個數字。
input() 函數接收用戶輸入的字串。
user_input.split() 把字串分割成一個列表（例如 "3 7 2 9" 會變成 ['3', '7', '2', '9']）。
map(int, ...) 把每個分割出來的元素轉換成整數，然後使用 list() 把它們轉成列表。
average(nums) 函數計算並返回平均值，並顯示結果。


＊＊＊
為什麼已經int了還要map
在這段程式碼中，使用 map(int, user_input.split()) 的目的是將從 input() 函數獲得的字串（字符串）轉換為整數。

詳細解釋：
input() 函數：
input() 返回的是一個字串，無論用戶輸入的是數字還是文字。因此，無論用戶輸入的是 3 7 2 9 或其他數字，這個輸入會被視為一個字串，例如 "3 7 2 9"。

split() 函數： split() 是字串的一個方法，它會根據空格將字串分割成多個元素，返回一個列表。例如，對於輸入 "3 7 2 9"，split() 會將它分割成 ['3', '7', '2', '9']。

為什麼要用 map()： 使用 split() 之後，我們得到的是一個列表，裡面的每一個元素都是字串型態（str），即便這些字串實際上看起來像數字，但它們還是字串。為了進行數學運算（如加總），我們需要將它們轉換成整數型態。

map(int, ...) 就是將列表中的每一個元素通過 int() 函數轉換為整數。map() 函數會對列表中的每個元素依次應用 int() 函數。

為什麼不直接用 int()：
你可能會想，為什麼不直接在 input() 之後對每個元素使用 int() 轉換呢？這樣也可以，但這樣需要使用一個迴圈來處理每個元素，而 map() 函數其實是對每個元素做了同樣的事。

例如，使用 map() 的方法：
nums = list(map(int, user_input.split()))
這是直接將 input() 的字串分割後，對每個元素進行 int() 轉換。

如果不使用 map()，可以寫成：
nums = [int(num) for num in user_input.split()]

這樣也能達到相同的效果，只是需要寫多一點程式碼。
總結：
input() 得到的是字串。

split() 將字串分割成列表。

map(int, ...) 或 [int(num) for num in ...] 用來將每個字串轉換為整數，這樣就能進行數學運算了。

＊＊＊
map的用法
map() 是 Python 中的一個內建函數，用於對可迭代對象（如列表、元組等）中的每個元素應用一個指定的函數，並返回一個迭代器。

map() 的基本語法：
map(function, iterable)
function：對每個元素執行的函數，可以是內建函數，也可以是自定義函數。

iterable：要處理的可迭代對象（如列表、元組、字串等）。

map() 會做什麼？
map() 會將 iterable 中的每個元素傳遞給 function，然後返回一個新的迭代器（不會立刻運行，只有在你需要結果時才會生成）。

這個迭代器包含了 function 處理後的結果。

map() 返回的是迭代器
注意，map() 返回的是一個 迭代器，這意味著它並不會立刻生成結果，你需要將結果轉換成列表（使用 list()）或其他類型，才能看到結果。

範例 1：將數字轉換為整數
假設你有一個包含數字字串的列表，並且你想將這些字串轉換為整數。
nums = ["1", "2", "3", "4", "5"]
# 使用 map() 來將每個字串轉換為整數
int_nums = map(int, nums)
# 轉換後需要用 list() 來顯示結果
print(list(int_nums))  # 輸出: [1, 2, 3, 4, 5]
範例 2：對每個數字進行平方
你可以使用 map() 將一個數字列表中的每個數字進行平方運算。
nums = [1, 2, 3, 4, 5]
# 使用 map() 和一個 lambda 函數來計算平方
squared_nums = map(lambda x: x ** 2, nums)
print(list(squared_nums))  # 輸出: [1, 4, 9, 16, 25]
在這裡，我們使用了 lambda 函數來表示匿名函數，它會對每個元素進行平方操作。
範例 3：處理兩個列表
map() 不僅能處理一個列表，還能處理多個可迭代對象。它會並行地處理這些對象的元素，並將結果返回。
list1 = [1, 2, 3]
list2 = [4, 5, 6]
# 使用 map() 並對應每對元素進行加總
sum_lists = map(lambda x, y: x + y, list1, list2)
print(list(sum_lists))  # 輸出: [5, 7, 9]
這裡，map() 同時處理了 list1 和 list2，並將它們對應位置的元素相加。
範例 4：處理不同類型的數據
你也可以處理其他類型的數據，比如將一組字串轉換為大寫。
words = ["apple", "banana", "cherry"]
# 使用 map() 將所有字串轉換為大寫
uppercase_words = map(str.upper, words)
print(list(uppercase_words))  # 輸出: ['APPLE', 'BANANA', 'CHERRY']
範例 5：自定義函數
你還可以使用自定義函數來處理列表中的元素。
def square(x):
    return x ** 2

nums = [1, 2, 3, 4]
squared_nums = map(square, nums)
print(list(squared_nums))  # 輸出: [1, 4, 9, 16]
在這裡，我們定義了一個名為 square 的自定義函數，然後將它傳遞給 map()，以對列表中的每個元素進行平方處理。

map() vs 列表解析（List Comprehension）
map() 和列表解析（List Comprehension）有相似的作用，但寫法上有所不同。兩者都能對列表中的元素進行變換。

例如，對每個數字求平方：
# 使用 map()
squared_nums = map(lambda x: x ** 2, [1, 2, 3, 4])
print(list(squared_nums))  # 輸出: [1, 4, 9, 16]

# 使用列表解析
squared_nums = [x ** 2 for x in [1, 2, 3, 4]]
print(squared_nums)  # 輸出: [1, 4, 9, 16]
兩者的效果相同，map() 需要額外轉換成列表（list()），而列表解析則更簡單、直觀。

總結：
map() 是對可迭代對象中的每個元素應用一個函數。

map() 返回的是一個迭代器，如果需要結果，需要使用 list() 或其他可迭代對象來顯示。

可以用 map() 處理多個可迭代對象，並對其元素進行操作。

＊＊＊
map是遍歷的意思嗎
map() 並不是「遍歷」的意思，但它可以遍歷可迭代對象中的每個元素，並對它們進行處理。讓我詳細解釋一下：

map() 的功能：
map() 函數的主要作用是對可迭代對象（例如列表、元組等）中的每一個元素應用一個指定的函數。這個過程是自動的，但它的作用不同於傳統意義上的「遍歷」。

與遍歷的區別：
遍歷（通常是指 for 迴圈）是逐一處理每個元素，並且通常我們會顯式地執行某些操作（例如打印、累加等等）。

map() 則是「批量處理」，它會自動對每個元素應用一個函數，並返回一個新的迭代器。

差異：
for 迴圈遍歷 需要手動指定對每個元素做什麼操作。

map() 是一個高階函數，可以自動對每個元素應用一個函數，並且不需要寫顯式的迴圈結構。

範例比較：
傳統的 for 迴圈遍歷：
nums = [1, 2, 3, 4]
squared_nums = []
for num in nums:
    squared_nums.append(num ** 2)  # 手動執行平方操作
print(squared_nums)  # 輸出: [1, 4, 9, 16]
使用 map() 函數：
nums = [1, 2, 3, 4]
squared_nums = map(lambda x: x ** 2, nums)  # 使用 map() 直接對每個元素平方
print(list(squared_nums))  # 輸出: [1, 4, 9, 16]
重要區別：
在 for 迴圈中，你需要寫明每個步驟來處理每個元素，並且將結果儲存在一個新的容器中。

在 map() 中，你只需要提供一個函數，並且它會自動處理每個元素的操作，並返回一個新的迭代器。

結論：
map() 的功能與遍歷相似，但它的特點是 自動化。它會依次處理可迭代對象中的每個元素，並將每個元素傳遞給指定的函數，從而簡化了寫迴圈的過程。因此，map() 是一個用來「對每個元素進行某些操作」的工具，而不單純是「遍歷」元素。


＊＊＊
這裡的map用的是什麼函數處理
map() 是用來將用戶輸入的字串轉換為整數的函數。具體來說，map() 會遍歷 user_input.split() 分割出來的字串列表，並將每一個字串元素轉換成整數。

map() 函數的具體作用：
nums = list(map(int, user_input.split()))
這段程式碼是這樣運作的：

user_input.split()：這一步會將用戶輸入的字串（例如 "3 7 2 9"）按空格分割成一個列表，得到 ['3', '7', '2', '9']。

map(int, ...)：map() 函數接收兩個參數：

第一個參數是 int，這是用來轉換每一個字串元素的函數。

第二個參數是 user_input.split()，也就是那個分割出來的字串列表 ['3', '7', '2', '9']。

map(int, ...) 會將 int 函數應用於列表中的每個元素，將每個字串轉換成對應的整數。例如，'3' 會被轉換成 3，'7' 會被轉換成 7，依此類推。

list()：map() 函數返回的是一個迭代器，所以需要用 list() 將其轉換為列表，這樣我們就得到了整數列表 [3, 7, 2, 9]。

總結：
map(int, ...) 使用了 int 這個內建函數來處理列表中的每個元素，將每個字串轉換為對應的整數。

具體程式流程：
用戶輸入數字，並以空格分隔。

使用 split() 把用戶的輸入字串分割成一個字串列表。

使用 map(int, ...) 將每個字串轉換成整數。

轉換後的結果傳遞給 average() 函數，計算平均值並顯示。

例子：
假設用戶輸入：
3 7 2 9
執行過程：

user_input.split() 結果是 ['3', '7', '2', '9']。

map(int, ...) 會將每個字串轉換為對應的整數，得到 [3, 7, 2, 9]。

然後將這個整數列表傳給 average() 函數，計算並返回平均值。

＊＊＊
這裡的map是遍歷然後套int在每一個上面嗎
對的，map() 在這裡的作用正是遍歷每個元素，並對每個元素應用 int() 函數。讓我詳細說明一下這個過程：
程式碼片段：
nums = list(map(int, user_input.split()))
步驟解析：
user_input.split()：

假設用戶輸入的數字為 "3 7 2 9"。

split() 會將這個字串根據空格分開，產生一個字串列表：['3', '7', '2', '9']。

map(int, ...)：

map() 函數會遍歷 user_input.split() 這個列表中的每一個元素。

每個元素都是一個字串（例如 '3'、'7'、'2'、'9'）。

map() 將會對每個字串應用 int() 函數，也就是把 '3' 轉換成整數 3，'7' 轉換成 7，依此類推。

具體來說，這裡的 map() 會像是以下這樣：

第一個元素 '3' → 使用 int() 轉換為 3。

第二個元素 '7' → 使用 int() 轉換為 7。

第三個元素 '2' → 使用 int() 轉換為 2。

第四個元素 '9' → 使用 int() 轉換為 9。

結果就是將字串列表 ['3', '7', '2', '9'] 轉換為整數列表 [3, 7, 2, 9]。

list()：

map() 返回的是一個迭代器，所以我們用 list() 函數將其轉換為列表。這樣，map(int, ...) 會返回一個新的列表 [3, 7, 2, 9]。

總結：
map() 的作用是 遍歷 user_input.split() 列表中的每個元素，並將每個元素應用 int() 函數進行轉換。因此，map() 會對每個字串元素應用 int()，結果是將字串轉換為對應的整數。

可以想像成以下這個過程：
# 類似於這樣的操作：
nums = []
for item in user_input.split():
    nums.append(int(item))
但 map() 是更簡潔的寫法，能達到相同的效果。

最終結果：
當用戶輸入 "3 7 2 9" 時，經過 map(int, user_input.split()) 之後，nums 會是 [3, 7, 2, 9]。








"""

