"""
題目
3. 奇偶分類
寫一個函數 classify_even_odd(numbers)，將一組整數 list 中的數字分成奇數與偶數，回傳字典：{
  'even': [...],
  'odd': [...]
}

"""

def classify_even_odd(numbers):
    result = {'even': [], 'odd': []}
    for num in numbers:
        if num % 2 == 0:
            result['even'].append(num)
        else:
            result['odd'].append(num)
    return result

number = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(classify_even_odd(number))



"""
執行結果：
{'even': [2, 4, 6, 8], 'odd': [1, 3, 5, 7, 9]}

解釋：
初始化字典：result = {'even': [], 'odd': []} 我們創建了一個字典 result，其中 even 和 odd 鍵都對應到空的列表，分別用來存放偶數和奇數。

遍歷數字：for num in numbers: 遍歷傳入的 numbers 列表。

判斷奇偶：if num % 2 == 0: 用 num % 2 == 0 判斷數字是否為偶數。如果是偶數，就把它加入到 result['even'] 列表中，否則加入到 result['odd'] 列表中。

返回結果：最後，返回包含奇數和偶數的字典 result。

程式碼分析：
你定義了 classify_even_odd(numbers) 函數，並初始化了一個字典 result，其中包含兩個鍵：'even' 用於存放偶數，'odd' 用於存放奇數。

使用 for 迴圈遍歷 numbers 列表中的每個數字。

使用 num % 2 == 0 判斷數字是否為偶數，若是，則將其加入到 result['even']；若不是，則加入到 result['odd']。

最後返回 result 字典，包含分類後的奇數和偶數列表。

測試結果：
當 number = [1, 2, 3, 4, 5, 6, 7, 8, 9] 時，程式會返回：
{'even': [2, 4, 6, 8], 'odd': [1, 3, 5, 7, 9]}





＊＊＊
' 和 "的區別
在 Python 中，單引號 (') 和雙引號 (") 都可以用來表示字串，基本上是等價的，並且沒有本質的區別。它們的功能完全一樣，主要區別在於你如何選擇使用它們。讓我詳細解釋一下：

1. 基本功能
單引號 (') 和 雙引號 (") 都是用來創建字串的界定符號。
single_quote_str = '這是一個字串'
double_quote_str = "這也是一個字串"
兩者都可以包含相同的字串內容，並且在 Python 中，它們的使用沒有任何功能上的差異。

2. 何時使用單引號，何時使用雙引號
雖然單引號和雙引號是等價的，但有些情況下選擇其中之一會更加方便：

當字串內有單引號時：
如果字串本身包含單引號，你可以使用雙引號來包裹這個字串，這樣就不需要用到反斜線（\）來進行轉義。
# 使用雙引號來包裹包含單引號的字串
sentence = "It's a nice day!"
當字串內有雙引號時：
如果字串本身包含雙引號，使用單引號來包裹字串會讓程式碼更簡潔，避免使用反斜線。
# 使用單引號來包裹包含雙引號的字串
sentence = 'He said, "Hello!"'
需要使用反斜線來轉義時：
如果字串中既包含單引號也包含雙引號，那麼你可以選擇使用反斜線來轉義引號，或者使用三重引號來避免轉義。
# 使用反斜線來轉義單引號或雙引號
sentence = 'It\'s a "nice" day!'  # 轉義單引號和雙引號
sentence2 = "It's a \"nice\" day!"

# 或者使用三重引號來包裹
sentence3 = '''It's a "nice" day!'''
3. 多行字串
如果你需要創建一個包含多行的字串，通常會使用 三重引號（''' 或 """），而這與單引號或雙引號無關。
# 使用三重單引號
multi_line_str = '''這是一個
包含多行的
字串'''

# 使用三重雙引號
multi_line_str2 = """這也是一個
包含多行的
字串"""
4. 風格上的選擇
PEP 8（Python 的官方風格指南） 沒有強制要求使用單引號或雙引號，只是建議在同一個專案中保持一致性。選擇單引號或雙引號通常取決於個人或團隊的風格偏好。

例如，有些團隊或開發者偏好使用單引號來表示字串，而其他人則更喜歡雙引號。最重要的是在同一專案中保持一致，這樣程式碼更具可讀性。

結論：
單引號和雙引號是等價的，沒有本質上的區別。

選擇使用單引號還是雙引號，取決於字串的內容（是否包含引號）或個人/團隊的編碼風格。

PEP 8 建議 在專案中選擇一種並保持一致。


"""
