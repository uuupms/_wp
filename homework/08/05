"""
5. 英文成績轉等第
寫一個函數 grade(score)，根據分數輸出等第：

90~100: A
80~89: B
70~79: C
60~69: D
0~59: F

"""

def grade(score):
    if 90 <= score <= 100:
        return 'A'
    elif 80 <= score <= 89:
        return 'B'
    elif 70 <= score <= 79:
        return 'C'
    elif 60 <= score <= 69:
        return 'D'
    elif 0 <= score <= 59:
        return 'F'
   else:
        return 'Invalid score'

print(grade(95))
print(grade(85))
print(grade(75))
print(grade(65))
print(grade(50))
print(grade(105))


"""
執行結果：
A
B
C
D
F
Invalid score


解釋：
條件判斷：

if 90 <= score <= 100:：如果 score 在 90 到 100 之間（包含 90 和 100），回傳 'A'。

接下來的 elif 條件會依照分數範圍對應到 'B'、'C'、'D' 和 'F' 等級。

最後一個 else 用來處理無效的分數（例如超過 100 或小於 0）。

回傳等第： 根據分數的範圍，會返回對應的等第（例如：'A'、'B'、'C' 等）。

處理無效分數：
若用戶輸入的分數超出了 0 到 100 的範圍，程式會返回 'Invalid score'。






python的註解怎麼寫
在 Python 中，註解是用來說明程式碼的，幫助開發者理解程式的邏輯，並且不會影響程式的執行。Python 支援兩種形式的註解：

### 1. 單行註解
單行註解以 `#` 開頭，後面跟著註解內容。這一行的內容會被 Python 解釋器忽略。

#### 範例：
```python
# 這是一個單行註解
print("Hello, world!")  # 這是行尾註解
```

在這個範例中：
- 第一行的 `# 這是一個單行註解` 是單行註解，解釋了程式碼的用途。
- 在 `print` 語句後面的 `# 這是行尾註解` 也屬於單行註解，這段註解位於程式碼行尾部，仍然是註解的一部分。

### 2. 多行註解（或文檔字串）
如果註解內容較多，或需要寫多行註解，可以使用 **多行註解**。Python 沒有專門的多行註解語法，但你可以使用 **三重引號**（`'''` 或 `"""`）來創建多行註解，這會被 Python 解釋器忽略。

#### 範例：
```python
'''
這是多行註解的範例。
可以寫很多行文字，直到結束的三個單引號。
'''
print("Hello, world!")

"""
這也是一個多行註解，
可以使用三重雙引號來實現。
"""
print("Another example")
```

### 注意：
- **三重引號**（`'''` 或 `"""`）通常用於多行字串，但如果它們不被賦值給任何變數或不在函數中作為文檔字串使用，Python 會將其視為註解並忽略它。
- 雖然多行字串可以作為註解來使用，但它們更多是用來寫 **文檔字串**（docstring），通常位於函數、類別、模塊等的開頭來描述其功能。

### 範例：使用文檔字串來描述函數
```python
def add(a, b):
    """
    這個函數用來計算兩個數字的和。
    參數：
    a: 第一個數字
    b: 第二個數字
    回傳：
    返回兩個數字的和
    """
    return a + b
```
在這個範例中，`"""` 用來寫多行註解，通常用來描述函數的功能、參數和返回值。

### 小結：
- 單行註解：使用 `#` 來添加單行註解。
- 多行註解：使用三重引號（`'''` 或 `"""`）來添加多行註解，雖然這通常用於文檔字串。



"""
