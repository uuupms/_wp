"""
8. 判斷質數
寫一個函數 is_prime(n)，輸入一個整數 n，回傳是否為質數（True/False）。
"""

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True


"""
解釋：
n <= 1：排除小於或等於 1 的數，這些不是質數。

n == 2：2 是唯一的偶數質數。

n % 2 == 0：排除其他偶數。

從 3 開始到 √n，步長為 2（只檢查奇數），看是否能整除 n。

＊＊＊
✅ range(3, int(n**0.5) + 1, 2) 的意思是：
這會產生一個從 3 開始，到 √n（開根號後取整數）為止的奇數序列。

n**0.5 是 n 的平方根。

int(n**0.5) + 1 是為了確保檢查到平方根（因為 range 不含尾端）。

2 是步長，意思是每次加 2 → 所以只會檢查 奇數（偶數已經在前面排除了）。

🔍 例如：n = 29 時，range(3, int(29**0.5) + 1, 2) 會等於 range(3, 6, 2) → 產生 [3, 5]

✅ if n % i == 0: 的意思是：
這裡檢查 n 是否能被目前的 i 整除。

% 是取餘數的符號

如果 n % i == 0，代表 i 是 n 的因數，所以 n 不是質數

🚀 合起來意思就是：
我們只檢查奇數 i，從 3 開始到 √n 為止，看看是否有任何 i 能整除 n。
如果有，就不是質數；如果都不能整除，才是質數。

這是一個很好的問題，牽涉到**質數檢查的效率優化**。我來清楚說明：

---

### 💡 為什麼從 **3 開始**，只檢查 **奇數**？

因為在這段程式碼之前：

```python
if n % 2 == 0:
    return False
```

我們已經先排除了所有**偶數**，也就是說：

- 如果 `n` 是偶數 → 一定不是質數（除了 2 這個例外，前面也已處理）
- 所以接下來就 **不需要再檢查偶數因數了**，只需檢查奇數就夠了，這樣可以少一半的運算次數。

---

### 💡 為什麼只檢查到 **√n** 就夠了？

這是數學的重點邏輯：

- 如果一個數字 `n` 有一個因數 `a`，那一定有另一個因數 `b`，使得 `a × b = n`
- 那其中一個因數必定小於或等於 `√n`

### ✅ 範例：

假設 `n = 36`，那它的因數對有：

```
1 × 36  
2 × 18  
3 × 12  
4 × 9  
6 × 6  ← 平方根
```

你會發現：
- 從 `6` 之後，所有的因數其實都已經是前面因數的「配對」
- 所以我們只要檢查到 `√n`，就可以知道 `n` 是否有因數

---

### 🧠 總結這段邏輯：
```python
for i in range(3, int(n**0.5) + 1, 2):
```
這行的設計是為了：
- **效率最高**（因為省略偶數和超過平方根的檢查）
- **正確性仍保證**（因為沒有遺漏任何必要的因數）

---
很好，這一行：

```python
for i in range(3, int(n**0.5) + 1, 2):
```

我們來**逐個拆解說明**：

---

## 🔹 `range(起始, 結束, 間隔)` 是 Python 產生數字序列的方式

- `range(start, stop, step)`
- `start`：開始的數字（這裡是 3）
- `stop`：**不包含的上限**（這裡是 `int(n**0.5) + 1`）
- `step`：步長（這裡是 `2`，表示每次跳 2）

---

## ✅ 解釋 `int(n**0.5) + 1`

- `n**0.5`：表示 `n` 的平方根（開根號）
- `int(...)`：取整數（例如 `√10 ≈ 3.16`，會變成 `3`）
- `+ 1`：為了**包含平方根本身**（因為 `range()` 的結束值是**不包含**的）

### 🔍 為什麼加 1？
假設 `n = 49`，那 `n**0.5 = 7`，我們想檢查是否能被 `7` 整除。
但如果你只寫 `range(3, int(n**0.5), 2)`，就會是 `range(3, 7, 2)` → 只會檢查 3、5，**漏掉 7**。

所以要寫成：
```python
range(3, int(n**0.5) + 1, 2)
```
這樣才會包含到 7。

---

## ✅ 最後的 `2` 是什麼？

這是**步長**（每次增加多少）：

- 寫 `2` 就表示每次遞增 2 → 只會檢查 **奇數**
- 因為偶數已經被 `if n % 2 == 0` 排除掉了

---

## 🧠 總結一下整行：

```python
for i in range(3, int(n**0.5) + 1, 2):
```

意思是：
從 3 開始，一次加 2，直到 `√n` 為止，只檢查奇數因數是否能整除 `n`。

---

很棒的問題！讓我用簡單方式解釋什麼是 `range()`。

---

## ✅ `range()` 是什麼？

`range()` 是 **Python 用來產生一串數字的函數**，常搭配 `for` 迴圈使用。

你可以用它來跑「從哪裡開始，到哪裡結束，要跳幾步」的**數字序列**。

---

## 🧩 用法格式：

```python
range(起始, 結束（不包含）, 間隔)
```

- `start`：從哪個數字開始（可以省略，預設是 0）
- `stop`：到哪個數字結束，但**不包含**這個數字
- `step`：每次增加多少（可以省略，預設是 1）

---

## 🔍 範例：

### 1. 最基本用法：
```python
for i in range(5):
    print(i)
```
輸出：
```
0
1
2
3
4
```
👉 從 0 開始，跑到 4（不包含 5）

---

### 2. 指定起始值：
```python
for i in range(2, 6):
    print(i)
```
輸出：
```
2
3
4
5
```

---

### 3. 指定間隔（步長）：
```python
for i in range(1, 10, 2):
    print(i)
```
輸出：
```
1
3
5
7
9
```
👉 每次跳 2，所以只列出奇數

---

## ✅ `range()` 的特點：

- 數字序列可以用來控制迴圈次數
- 它**不會一次產生所有數字在記憶體中**，所以非常節省記憶體（這叫做「惰性生成」）

---

`**` 是 **Python 的次方運算符**，也就是「乘方」或「冪次」的意思。

---

### ✅ 用法：
```python
a ** b
```
表示：`a` 的 `b` 次方（也就是 `a` 的 b 次冪）

---

### 🔍 例子：

```python
2 ** 3  # 等於 8，因為 2 × 2 × 2 = 8
5 ** 2  # 等於 25，因為 5 × 5 = 25
9 ** 0.5  # 等於 3.0，因為這是開根號（9 的 0.5 次方）
```

所以你在這行看到的：
```python
int(n**0.5)
```
意思就是先求 `n` 的 **平方根**（因為 0.5 次方就是開根號），再轉成整數。

---

Python 中常見的運算符號（Operator）整理表：

---

### ✅ **數學運算符號**

| 符號  | 說明           | 範例             | 結果    |
|-------|----------------|------------------|---------|
| `+`   | 加法           | `3 + 2`          | `5`     |
| `-`   | 減法           | `5 - 2`          | `3`     |
| `*`   | 乘法           | `4 * 3`          | `12`    |
| `/`   | 除法（浮點）   | `7 / 2`          | `3.5`   |
| `//`  | 整數除法       | `7 // 2`         | `3`     |
| `%`   | 餘數（模）     | `7 % 2`          | `1`     |
| `**`  | 次方（乘冪）   | `2 ** 3`         | `8`     |

---

### ✅ **比較運算符號**（結果為 `True` 或 `False`）

| 符號  | 說明           | 範例             | 結果    |
|-------|----------------|------------------|---------|
| `==`  | 等於           | `5 == 5`         | `True`  |
| `!=`  | 不等於         | `5 != 3`         | `True`  |
| `>`   | 大於           | `5 > 3`          | `True`  |
| `<`   | 小於           | `3 < 5`          | `True`  |
| `>=`  | 大於或等於     | `5 >= 5`         | `True`  |
| `<=`  | 小於或等於     | `3 <= 5`         | `True`  |

---

### ✅ **邏輯運算符號**

| 符號    | 說明          | 範例                   | 結果    |
|---------|---------------|------------------------|---------|
| `and`   | 且（兩者都為真） | `True and False`       | `False` |
| `or`    | 或（任一為真）   | `True or False`        | `True`  |
| `not`   | 非（取反）     | `not True`             | `False` |

---

太好了！這裡是 Python 中常見的 **條件語句** 和 **迴圈語法** 總整理：

---

## ✅ **條件語句（if, elif, else）**

```python
if 條件:
    執行的程式碼
elif 其他條件:
    執行的程式碼
else:
    執行的程式碼
```

### 🔍 範例：
```python
x = 10

if x > 0:
    print("正數")
elif x == 0:
    print("零")
else:
    print("負數")
```

---

## ✅ **for 迴圈**（用來重複執行一定次數）

```python
for 變數 in 可重複對象:
    執行的程式碼
```

### 🔍 範例：
```python
for i in range(5):
    print(i)
```
輸出：
```
0
1
2
3
4
```

---

## ✅ **while 迴圈**（只要條件為 True 就會一直執行）

```python
while 條件:
    執行的程式碼
```

### 🔍 範例：
```python
x = 0
while x < 3:
    print(x)
    x += 1
```

---

## ✅ **控制迴圈的語法**

| 指令      | 說明                         |
|-----------|------------------------------|
| `break`   | 強制跳出迴圈                 |
| `continue`| 跳過當次迴圈，進入下一次迴圈 |
| `pass`    | 不做任何事（占位用）         |

### 範例：
```python
for i in range(5):
    if i == 3:
        break
    print(i)  # 會印出 0, 1, 2
```

---


"""
