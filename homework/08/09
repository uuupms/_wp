"""
9. 找出 list 中出現次數最多的數字
寫一個函數 most_common(nums)，輸入一個整數 list，找出其中出現次數最多的數字（可用字典記錄出現次數）。
"""

def most_common(nums):
    count_dict = {}

    for num in nums:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1

    most_common_num = max(count_dict, key=count_dict.get)
    return most_common_num


"""
🔍 範例使用：
nums = [1, 2, 2, 3, 3, 3, 4]
print(most_common(nums))  # 輸出：3

✅ 說明：
count_dict[num] += 1：累加該數字的出現次數。

max(count_dict, key=count_dict.get)：從字典中找出對應數值（出現次數）最大的 key（數字）。

nums = [1, 2, 2, 3, 3, 3, 4]
print(most_common(nums))  # 輸出：3

✅ 使用字典 count_dict 來記錄每個數字出現的次數。

✅ 利用 max(..., key=...) 找出「值最大的 key」（也就是次數最多的數字）。

most_common(nums) 是一個函數，功能是：

✅ 找出 list 中出現次數最多的數字
📥 輸入：
一個整數的列表（例如：[1, 2, 2, 3, 3, 3]）

📤 輸出：
出現次數最多的那個數字（例如：3）

🧠 它的邏輯：
建立一個空字典 count_dict，用來記錄每個數字出現的次數。

遍歷整個列表，把每個數字出現的次數加進字典。

使用 max(..., key=...) 找出字典中「對應數值最大」的那個 key，也就是出現次數最多的數字。


count_dict = {}
是 建立一個空的字典（dictionary），用來儲存每個數字出現的次數。

✅ 什麼是字典（dict）？
在 Python 中，字典是一種資料結構，用來存放「鍵值對」（key-value pairs）。

key：是標籤（在這裡是「數字」）

value：是對應的資料（在這裡是「出現次數」）

🧠 為什麼要這樣寫？
當你一開始要記錄每個數字出現幾次時，你需要一個空字典，之後才能把數字一個個加進去：

所以，count_dict = {} 就是： 👉 「我要準備一個空字典，來記錄每個數字出現幾次。」

for num in nums:
是 Python 中 for 迴圈 的用法，它的意思是：
✅ 逐一走訪 nums 這個列表中的每個元素，並把它暫時存在變數 num 中

假設你有這個列表：nums = [1, 2, 2, 3]
這段迴圈：
for num in nums:
    print(num)

會做的事情是：

第一次執行：num = 1

第二次執行：num = 2

第三次執行：num = 2

第四次執行：num = 3

所以會印出：
1
2
2
3
✅ 用在哪裡？
在 most_common(nums) 裡，它是用來「一個一個數字去統計」的關鍵步驟：

for num in nums:
    if num in count_dict:
        count_dict[num] += 1
    else:
        count_dict[num] = 1

意思是：「每次從 nums 裡拿出一個數字 num，看看有沒有出現過，然後更新它的出現次數。」

小結：
for num in nums: → 把 nums 裡的每個數字一個一個拿出來

num 是一個暫時的變數，代表目前處理的數字

---
if num in count_dict:
            count_dict[num] += 1
✅ 它的意思是什麼？
這是在做 「如果這個數字已經出現過，就讓它的出現次數加 1」。
🔍 一步步解釋：
假設我們現在在處理數字 2，而目前的 count_dict 是這樣：count_dict = {1: 1, 2: 1}
if num in count_dict:意思是：「如果這個數字 num（例如 2）已經在 count_dict 裡存在...」
✔️ 在這例子中，2 已經存在於字典中，所以執行下一行：
count_dict[num] += 1
也就是把 count_dict[2] 的值從 1 變成 2，代表數字 2 又多出現了一次。

❓那如果這個數字第一次出現呢？
這時就會執行 else 部分：
else:
    count_dict[num] = 1
意思是：「這個數字從來沒看過，那就把它放進字典裡，出現次數先設為 1。」
📌 總結邏輯：
if num in count_dict:
    count_dict[num] += 1  # 已經出現過，就加一
else:
    count_dict[num] = 1   # 第一次出現，設為 1

這樣就可以幫你「統計每個數字出現了幾次」！

---
count_dict[num]?
count_dict[num] 是字典的「查詢與設定」語法

✅ count_dict[num] 是什麼？
這是 Python 字典（dictionary）的用法，用來「查詢或設定」某個鍵（key）對應的值（value）。

在這裡：

count_dict 是一個字典

num 是你要查的 key（這裡是某個整數）

count_dict[num] 表示「這個數字目前出現了幾次」

🧠 舉例說明：
假設我們有這樣的字典：count_dict = {1: 2, 3: 5}
count_dict[1] → 會傳回 2
count_dict[3] → 會傳回 5
count_dict[2] → ❌ 會出錯，如果 key 不存在

🧱 在 most_common() 函數中：
當你寫：count_dict[num] += 1
意思就是：

「把這個數字 num 出現的次數 +1」

例如：如果 num = 2，而 count_dict[2] = 3，那執行完就變成 count_dict[2] = 4

而這行前面通常會搭配：if num in count_dict:
這樣可以避免你查詢一個「還沒加入字典」的 key。

✨ 小結：
語法	意思
count_dict[num] = 1	第一次看到 num，新增它，次數設為 1
count_dict[num] += 1	這個 num 出現過，把它的次數 +1
x = count_dict[num]	把 num 出現的次數存到變數 x


---
max(count_dict, key=count_dict.get)?
是用來找出字典中出現次數最多的數字。這裡使用了 Python 的 max() 函數來從字典中選擇出一個最大值，並且通過 key=count_dict.get 指定選擇的條件是字典的值（出現次數）。

✅ 分解這段程式碼：
1.count_dict：是我們的字典，裡面存的是數字和它們對應的出現次數，例如：
count_dict = {1: 2, 2: 4, 3: 1}
這表示數字 1 出現 2 次，數字 2 出現 4 次，數字 3 出現 1 次。
2.max() 函數：max() 是 Python 的內建函數，用來找出序列中的最大值。
語法：max(iterable, key=...)
iterable 是你想遍歷的物件（這裡是字典 count_dict）。
key 是一個函數，定義如何選擇「最大值」，這裡我們用 count_dict.get 來選擇「最大值」是根據字典的值（即出現次數）。
3.key=count_dict.get：這是用來指定在 max() 函數中，如何根據字典的「值」來選擇最大值。count_dict.get 是一個方法，它會返回字典中某個鍵（key）對應的值（value）。

✅ 具體示範：
假設有以下字典：count_dict = {1: 2, 2: 4, 3: 1}
1.max(count_dict, key=count_dict.get) 會做什麼？
它會遍歷字典的所有鍵值對（key-value pairs）。然後它會根據字典的值（出現次數）來比較，找出最大的一個。
2.count_dict.get 會返回每個數字對應的出現次數：
count_dict.get(1) → 2
count_dict.get(2) → 4
count_dict.get(3) → 1
3.最後，max() 函數會選擇出現次數最多的那個鍵，也就是 2，因為 2 的出現次數是 4，比其他數字大。

輸出：
max(count_dict, key=count_dict.get)  # 輸出：2
這樣你就得到了出現次數最多的數字 2。

🌟 總結：
max(count_dict, key=count_dict.get)：
max() 函數遍歷字典的鍵 key，並根據它們對應的出現次數（即字典的值）來選擇最大值。
count_dict.get 用來獲取每個 key 對應的出現次數。
---
get() 是 Python 字典（dictionary）的一個方法，它用來「查詢字典中的值」時，比直接用方括號（[]）來查詢更安全，因為它可以避免當查詢的鍵（key）不存在時拋出錯誤。
✅ get() 方法：dict.get(key, default)
key：你想查詢的鍵（key）。
default（可選）：如果鍵（key）不存在，則返回的預設值。如果不指定，則默認返回 None。
🧠 舉例解釋：
假設有以下字典：count_dict = {1: 2, 2: 4, 3: 1}
使用 get() 查詢一個存在的鍵：count_dict.get(2)  # 返回 4，因為 2 在字典中對應的值是 4
使用 get() 查詢一個不存在的鍵：count_dict.get(4)  # 返回 None，因為 4 不在字典中
你也可以給 get() 一個預設值，當鍵不存在時返回這個值：count_dict.get(4, 0)  # 返回 0，因為 4 不在字典中，所以返回預設值 0
✅ get() 的好處：
1.防止錯誤：如果直接用方括號查詢一個不存在的鍵，會拋出 KeyError 異常，像這樣：count_dict[4]  # 會拋出 KeyError，因為 4 不在字典中
2.提供預設值：用 get() 可以在查詢不存在的鍵時，返回一個預設值，避免錯誤，讓程式更穩定。

🌟 總結：
count_dict.get(key) 會返回字典中對應 key 的值。
如果 key 不在字典中，get() 會返回 None（或者你設定的其他預設值）。














"""
